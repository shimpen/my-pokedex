{"version":3,"sources":["data/region-list.ts","domains/pokeapi/models/raw/pokemons-result.ts","domains/pokeapi/models/raw/pokemon.ts","domains/pokeapi/models/raw/language.ts","domains/pokeapi/models/raw/name.ts","domains/pokeapi/models/raw/species.ts","domains/pokeapi/models/raw/type.ts","domains/pokeapi/services/config.ts","domains/pokeapi/services/raw/get-pokemons.ts","domains/pokeapi/services/raw/get-pokemon.ts","domains/pokeapi/services/raw/get-species.ts","domains/pokeapi/services/raw/get-type.ts","ErrorBoundary.tsx","components/molecules/Spinner.tsx","components/molecules/Pokemon.tsx","containers/molecules/Pokemon.tsx","components/organisms/PokemonList.tsx","containers/oraganisms/PokemonList.tsx","domains/pokeapi/data/region-url-list.ts","components/pages/Pokemons.tsx","containers/pages/Pokemons.tsx","App.tsx","index.tsx"],"names":["regionList","isPokemonsResult","arg","u","next","previous","results","some","pokemon","name","url","isPokemon","isPokemonDetail","p","id","species","types","type","slot","isPokemonType","sprites","frontDefault","other","officialArtwork","isLanguage","l","isName","n","language","isSpecies","s","flavorTextEntries","text","f","flavorText","isFlavorText","genera","genus","g","isGenus","names","isType","t","DEFAULT_API_OPTIONS","timeout","retry","hooks","afterResponse","_request","_options","response","a","Blob","JSON","camelcaseKeys","json","deep","stringify","body","headers","status","statusText","init","Response","getPokemonsResult","options","mergedOptions","ky","get","pokemons","Error","getPokemon","getSpecies","getType","DEFAULT_MESSAGES","0","ErrorBoundary","props","componentDidCatch","error","info","onError","console","render","children","statusMessages","state","hasError","messages","statusCode","Object","keys","includes","String","Message","warning","PureComponent","getDerivedStateFromError","Spinner","size","className","Loader","inline","active","Pokemon","Card","Meta","textAlign","Image","src","Header","find","map","rounded","Description","EnhancedPokemon","useQuery","enabled","data","type1","type2","length","PokemonList","result","fallback","Group","EnhancedPokemonList","useInfiniteQuery","pageParam","res","getNextPageParam","lastPage","pokemonsResults","fetchNextPage","hasNextPage","isFetchingNextPage","isFetching","pages","pokemonsResult","onClick","disabled","baseUrl","regionUrlMap","all","kanto","johto","hoenn","sinnoh","unova","kalos","alola","galar","Pokemons","prefetch","useState","regionName","setRegionName","useTransition","isPending","startTransition","ebKey","useRef","menuItems","region","key","capitalize","onMouseOver","Menu","items","Divider","404","current","EnhancedPokemons","enablePrefetch","queryClient","useQueryClient","pokemonsProps","prefetchQuery","load","App","QueryClient","defaultOptions","queries","suspense","mutations","rootElement","document","getElementById","ReactDOM","createRoot","client","process"],"mappings":"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","file":"static/js/main.26595886.chunk.js","sourcesContent":["export const regionList = [\n  'all',\n  'kanto',\n  'johto',\n  'hoenn',\n  'sinnoh',\n  'unova',\n  'kalos',\n  'alola',\n  'galar',\n] as const;\n\nexport type Region = typeof regionList[number];\n","export type Pokemon = {\n  name: string;\n  url: string;\n};\n\nexport type PokemonsResult = {\n  next: string | null;\n  previous: string | null;\n  results: Pokemon[];\n};\n\nconst isPokemon = (arg: unknown): arg is Pokemon => {\n  const u = arg as Pokemon;\n\n  return typeof u?.name === 'string' && typeof u?.url === 'string';\n};\n\nconst isPokemonsResult = (arg: unknown): arg is PokemonsResult => {\n  const u = arg as PokemonsResult;\n\n  return (\n    u?.next === null ||\n    (typeof u?.next === 'string' && u?.previous === null) ||\n    (typeof u?.previous === 'string' &&\n      !u?.results.some((pokemon) => !isPokemon(pokemon)))\n  );\n};\n\nexport { isPokemon, isPokemonsResult };\n","export type PokemonDetail = {\n  id: number;\n  name: string;\n  species: {\n    name: string;\n    url: string;\n  };\n  types: PokemonType[];\n  sprites: {\n    frontDefault: string;\n    other: {\n      officialArtwork: {\n        frontDefault: string;\n      };\n    };\n  };\n};\n\nexport type PokemonType = {\n  slot: number;\n  type: {\n    name: string;\n    url: string;\n  };\n};\n\nconst isPokemonType = (arg: unknown): arg is PokemonType => {\n  const p = arg as PokemonType;\n\n  return (\n    typeof p?.slot === 'number' &&\n    typeof p?.type.name === 'string' &&\n    typeof p?.type.url === 'string'\n  );\n};\n\nconst isPokemonDetail = (arg: unknown): arg is PokemonDetail => {\n  const p = arg as PokemonDetail;\n\n  return (\n    typeof p?.id === 'number' &&\n    typeof p?.name === 'string' &&\n    typeof p?.species.name === 'string' &&\n    typeof p?.species.url === 'string' &&\n    !p?.types.some((type) => !isPokemonType(type)) &&\n    typeof p?.sprites.frontDefault === 'string' &&\n    typeof p?.sprites.other.officialArtwork.frontDefault === 'string'\n  );\n};\n\nexport { isPokemonDetail };\n","export type Language = {\n  name: string;\n  url: string;\n};\n\nexport const isLanguage = (arg: unknown): arg is Language => {\n  const l = arg as Language;\n\n  return typeof l?.name === 'string' && typeof l?.url === 'string';\n};\n","import { Language, isLanguage } from './language';\n\nexport type Name = {\n  name: string;\n  language: Language;\n};\n\nexport const isName = (arg: unknown): arg is Name => {\n  const n = arg as Name;\n\n  return typeof n?.name === 'string' && isLanguage(n?.language);\n};\n","import { Language, isLanguage } from './language';\nimport { Name, isName } from './name';\n\nexport type FlavorText = {\n  flavorText: string;\n  language: Language;\n};\n\nexport type Genus = {\n  genus: string;\n  language: Language;\n};\n\nexport type Species = {\n  flavorTextEntries: FlavorText[];\n  genera: Genus[];\n  names: Name[];\n};\n\nconst isFlavorText = (arg: unknown): arg is FlavorText => {\n  const f = arg as FlavorText;\n\n  return typeof f?.flavorText === 'string' && isLanguage(f?.language);\n};\n\nconst isGenus = (arg: unknown): arg is Genus => {\n  const g = arg as Genus;\n\n  return typeof g?.genus === 'string' && isLanguage(g?.language);\n};\n\nconst isSpecies = (arg: unknown): arg is Species => {\n  const s = arg as Species;\n\n  return (\n    !s?.flavorTextEntries.some((text) => !isFlavorText(text)) &&\n    !s?.genera.some((genus) => !isGenus(genus)) &&\n    !s?.names.some((name) => !isName(name))\n  );\n};\n\nexport { isSpecies };\n","import { Name, isName } from './name';\n\nexport type Type = {\n  name: string;\n  names: Name[];\n};\n\nconst isType = (arg: unknown): arg is Type => {\n  const t = arg as Type;\n\n  return typeof t?.name === 'string' && !t?.names.some((name) => !isName(name));\n};\n\nexport { isType };\n","/* eslint-disable import/prefer-default-export */\nimport { Options as KyOptions, NormalizedOptions } from 'ky';\nimport camelcaseKeys from 'camelcase-keys';\n\nexport const DEFAULT_API_OPTIONS: KyOptions = {\n  timeout: 7000,\n  retry: 2,\n  hooks: {\n    afterResponse: [\n      async (\n        _request: Request,\n        _options: NormalizedOptions,\n        response: Response,\n      ): Promise<Response> => {\n        const body = new Blob(\n          [\n            JSON.stringify(\n              camelcaseKeys(await response.json(), { deep: true }),\n              null,\n              2,\n            ),\n          ],\n          { type: 'application/json' },\n        );\n        const { headers, status, statusText } = response;\n        const init = { headers, status, statusText };\n\n        return new Response(body, init);\n      },\n    ],\n  },\n};\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport {\n  isPokemonsResult,\n  PokemonsResult,\n} from '../../models/raw/pokemons-result';\n\n// const initialUrl = `https://pokeapi.co/api/v2/pokemon?limit=151`;\n\nconst getPokemonsResult = async (\n  url: string,\n  options?: Options,\n): Promise<PokemonsResult> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(url, mergedOptions);\n  const pokemons = (await response.json()) as unknown[];\n\n  if (!isPokemonsResult(pokemons)) {\n    throw Error('API type error');\n  }\n\n  return pokemons;\n};\n\nexport default getPokemonsResult;\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport { isPokemonDetail, PokemonDetail } from '../../models/raw/pokemon';\n\nconst getPokemon = async (\n  url: string,\n  options?: Options,\n): Promise<PokemonDetail> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(\n    url, // fixme nameかurlで取得することになるのかな？\n    mergedOptions,\n  );\n  const pokemon = (await response.json()) as unknown[];\n\n  if (!isPokemonDetail(pokemon)) {\n    throw Error('API type error');\n  }\n\n  return pokemon;\n};\n\nexport default getPokemon;\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport { isSpecies, Species } from '../../models/raw/species';\n\nconst getSpecies = async (url: string, options?: Options): Promise<Species> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(url, mergedOptions);\n  const species = (await response.json()) as unknown[];\n\n  if (!isSpecies(species)) {\n    throw Error('API type error');\n  }\n\n  return species;\n};\n\nexport default getSpecies;\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport { isType, Type } from '../../models/raw/type';\n\nconst getType = async (url: string, options?: Options): Promise<Type> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(url, mergedOptions);\n  const type = (await response.json()) as unknown[];\n\n  if (!isType(type)) {\n    throw Error('API type error');\n  }\n\n  return type;\n};\n\nexport default getType;\n","import { ErrorInfo, PureComponent, ReactNode } from 'react';\nimport ky from 'ky';\nimport { Message } from 'semantic-ui-react';\n\ntype StatusMessages = { [status: number]: string };\ntype Props = { statusMessages?: StatusMessages; onError?: () => void };\ntype State = { hasError: boolean; error: Error | null };\nconst DEFAULT_MESSAGES: StatusMessages = { 0: 'サーバエラーです' };\n\nclass ErrorBoundary extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError = (error: Error): State => ({\n    hasError: true,\n    error,\n  });\n\n  componentDidCatch = (error: Error, info: ErrorInfo): void => {\n    const { onError } = this.props;\n    if (onError) onError();\n\n    console.error(error, info); // eslint-disable-line no-console\n  };\n\n  render = (): ReactNode => {\n    const { children, statusMessages = {} } = this.props;\n    const { hasError, error } = this.state;\n    const messages = { ...DEFAULT_MESSAGES, ...statusMessages };\n\n    if (hasError) {\n      const statusCode = (error as ky.HTTPError)?.response?.status;\n\n      if (statusCode && Object.keys(messages).includes(String(statusCode))) {\n        return <Message warning>{messages[statusCode]}</Message>;\n      }\n\n      return <Message error>{messages[0]}</Message>;\n    }\n\n    return children;\n  };\n}\n\nexport default ErrorBoundary;\n","import { VFC } from 'react';\nimport { Loader, SemanticSIZES } from 'semantic-ui-react';\n\nimport './Spinner.css';\n\nconst Spinner: VFC<{ size?: SemanticSIZES }> = ({ size = 'medium' }) => (\n  <div className=\"spinner\">\n    <Loader size={size} inline=\"centered\" active>\n      読み込み中...\n    </Loader>\n  </div>\n);\n\nexport default Spinner;\n","import { VFC } from 'react';\nimport { Card, Image } from 'semantic-ui-react';\n\nimport { PokemonDetail, Species, Type } from '../../domains/pokeapi';\nimport './Pokemon.css';\n\nconst Pokemon: VFC<{\n  pokemon: PokemonDetail;\n  species: Species;\n  types: Type[];\n}> = ({ pokemon, species, types }) => (\n  <>\n    <Card className=\"card-container\" key={pokemon.id}>\n      <div className=\"card-header\">\n        <div>\n          <Card.Meta textAlign=\"left\">{pokemon.id}</Card.Meta>\n          <Image size=\"mini\" src={pokemon.sprites.frontDefault} />\n        </div>\n        <div>\n          <Card.Header textAlign=\"center\">\n            {species.names.find((name) => name.language.name === 'ja')?.name}\n          </Card.Header>\n          <Card.Header textAlign=\"center\">{pokemon.name}</Card.Header>\n        </div>\n        <div className=\"card-header__type\">\n          {types.map((type) =>\n            type.names.map(\n              (name) =>\n                name.language.name === 'ja-Hrkt' && (\n                  <Card.Header textAlign=\"right\" key={name.name}>\n                    {name.name}\n                  </Card.Header>\n                ),\n            ),\n          )}\n        </div>\n      </div>\n      <div className=\"card-image\">\n        <Image\n          size=\"large\"\n          src={pokemon.sprites.other.officialArtwork.frontDefault}\n          rounded\n        />\n      </div>\n      <div className=\"card-genera\">\n        <Card.Description>\n          {species.genera.find((genus) => genus.language.name === 'ja')?.genus}\n        </Card.Description>\n        <Card.Description>\n          {species.genera.find((genus) => genus.language.name === 'en')?.genus}\n        </Card.Description>\n      </div>\n      <div className=\"card-description\">\n        <Card.Description>\n          {\n            species.flavorTextEntries.find(\n              (text) => text.language.name === 'ja',\n            )?.flavorText\n          }\n        </Card.Description>\n        <Card.Description>\n          {\n            species.flavorTextEntries.find(\n              (text) => text.language.name === 'en',\n            )?.flavorText\n          }\n        </Card.Description>\n      </div>\n    </Card>\n  </>\n);\n\nexport default Pokemon;\n","import { VFC } from 'react';\nimport { useQuery } from 'react-query';\n\nimport Pokemon from '../../components/molecules/Pokemon';\nimport { getPokemon, getSpecies, getType } from '../../domains/pokeapi';\n\nconst EnhancedPokemon: VFC<{ url: string }> = ({ url }) => {\n  const { data: pokemon } = useQuery([url, 'pokemon'], () => getPokemon(url), {\n    enabled: !!url,\n  });\n  if (!pokemon) {\n    throw Error('getPokemon error');\n  }\n\n  const { data: species } = useQuery(\n    [pokemon.species.name, 'species'],\n    () => getSpecies(pokemon.species.url),\n    {\n      enabled: !!pokemon.species.url,\n    },\n  );\n  if (!species) {\n    throw Error('getSpecies error');\n  }\n\n  const { data: type1 } = useQuery(\n    [pokemon.types[0].type.name, 'type'],\n    () => getType(pokemon.types[0].type.url),\n    {\n      enabled: !!pokemon.types[0],\n    },\n  );\n  if (!type1) {\n    throw Error('getType error');\n  }\n\n  // fixme: type2を頑張ってとっているけどやり方ありそう...\n  const { data: type2 } = useQuery(\n    [\n      pokemon.types.length >= 2\n        ? pokemon.types[1].type.name\n        : pokemon.types[0].type.name,\n      'type',\n    ],\n    () =>\n      getType(\n        pokemon.types.length >= 2\n          ? pokemon.types[1].type.url\n          : pokemon.types[0].type.url,\n      ),\n    {\n      enabled: pokemon.types.length >= 2,\n    },\n  );\n  if (!type2) {\n    throw Error('getType error');\n  }\n\n  const types = pokemon.types.length >= 2 ? [type1, type2] : [type1];\n\n  return <Pokemon pokemon={pokemon} species={species} types={types} />;\n};\n\nexport default EnhancedPokemon;\n","/* eslint-disable no-console */\nimport Spinner from 'components/molecules/Spinner';\nimport ErrorBoundary from 'ErrorBoundary';\nimport { Suspense, SuspenseList, VFC } from 'react';\nimport { Card } from 'semantic-ui-react';\n\nimport EnhancedPokemon from '../../containers/molecules/Pokemon';\nimport { PokemonsResult } from '../../domains/pokeapi';\nimport './PokemonList.css';\n\nconst PokemonList: VFC<{ result: PokemonsResult }> = ({ result }) => (\n  <>\n    <ErrorBoundary>\n      <SuspenseList>\n        <Suspense fallback={<Spinner size=\"large\" />}>\n          <Card.Group className=\"cards-container\">\n            {result.results.map((pokemon) => (\n              <EnhancedPokemon url={pokemon.url} key={pokemon.name} />\n            ))}\n          </Card.Group>\n        </Suspense>\n      </SuspenseList>\n    </ErrorBoundary>\n  </>\n);\n\nexport default PokemonList;\n","/* eslint-disable no-console */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable react/button-has-type */\nimport { VFC } from 'react';\n// import { useQuery } from 'react-query';\nimport { useInfiniteQuery } from 'react-query';\n\nimport PokemonList from '../../components/organisms/PokemonList';\nimport { getPokemonsResult } from '../../domains/pokeapi';\nimport { Url } from '../../domains/pokeapi/data/region-url-list';\n\nconst EnhancedPokemonList: VFC<{ url: Url }> = ({ url }) => {\n  // const { data: pokemonsResult } = useQuery(\n  //   [url, 'pokemons'],\n  //   () => getPokemonsResult(url),\n  //   {\n  //     enabled: true,\n  //   },\n  // );\n\n  const {\n    data: pokemonsResults,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isFetching,\n    status, // 結局Suspenseは使えているのでstatusは不要なはず\n  } = useInfiniteQuery(\n    // 'pokemons', // move tabs, the query key that 'pokemons' is conflict and cannot re render.\n    `pokemons-${url}`, // FIXME: refactor more better query key\n    async ({ pageParam = url }) => {\n      const res = await getPokemonsResult(pageParam);\n\n      return res;\n    },\n    {\n      getNextPageParam: (lastPage) => lastPage.next,\n      enabled: true,\n    },\n  );\n\n  if (!pokemonsResults) {\n    throw Error('getPokemonsResult error');\n  }\n\n  return status === 'loading' ? (\n    <p>Loading...</p>\n  ) : status === 'error' ? (\n    <p>Error</p>\n  ) : (\n    <>\n      {pokemonsResults?.pages.map((pokemonsResult) => (\n        <PokemonList key={pokemonsResult.next} result={pokemonsResult} />\n      ))}\n      <div>\n        <button\n          onClick={() => fetchNextPage()} // FIXME: もっとみるのボタンをより奥のsuspenseに隠すか、intersectionObserverでの実装を行う\n          disabled={!hasNextPage || isFetchingNextPage}\n        >\n          {isFetchingNextPage\n            ? 'Loading more...'\n            : hasNextPage\n            ? 'Load More'\n            : 'Nothing more to load'}\n        </button>\n      </div>\n      <div>{isFetching && !isFetchingNextPage ? 'Fetching...' : null}</div>\n    </>\n  );\n};\n\nexport default EnhancedPokemonList;\n","import { Region } from '../../../data/region-list';\n\nexport type Url = `https://pokeapi.co/api/v2/pokemon?limit=${number}&offset=${number}`;\n\nexport type RegionUrlMap = { [key in Region]: Url };\n\nconst baseUrl = `https://pokeapi.co/api/v2/pokemon?`;\n\nconst regionUrlMap: RegionUrlMap = {\n  all: `${baseUrl}limit=24&offset=0`,\n  kanto: `${baseUrl}limit=24&offset=0`,\n  johto: `${baseUrl}limit=24&offset=151`,\n  hoenn: `${baseUrl}limit=24&offset=251`,\n  sinnoh: `${baseUrl}limit=24&offset=386`,\n  unova: `${baseUrl}limit=24&offset=493`,\n  kalos: `${baseUrl}limit=24&offset=649`,\n  alola: `${baseUrl}limit=24&offset=721`,\n  galar: `${baseUrl}limit=24&offset=809`,\n} as const;\n\n// Fixme: add see more function and remove under comments that get all each region.\n// const regionUrlMap: RegionUrlMap = {\n//   all: `${baseUrl}limit=100&offset=0`,\n//   kanto: `${baseUrl}limit=151&offset=0`,\n//   johto: `${baseUrl}limit=100&offset=151`,\n//   hoenn: `${baseUrl}limit=135&offset=251`,\n//   sinnoh: `${baseUrl}limit=97&offset=386`,\n//   unova: `${baseUrl}limit=156&offset=493`,\n//   kalos: `${baseUrl}limit=72&offset=649`,\n//   alola: `${baseUrl}limit=88&offset=721`,\n//   galar: `${baseUrl}limit=89&offset=809`,\n// } as const;\n\nexport default regionUrlMap;\n","import {\n  VFC,\n  Suspense,\n  SuspenseList,\n  useRef,\n  useState,\n  useTransition,\n} from 'react';\nimport { Divider, Menu } from 'semantic-ui-react';\n\nimport capitalize from 'lodash/capitalize';\nimport ErrorBoundary from '../../ErrorBoundary';\nimport Spinner from '../molecules/Spinner';\nimport EnhancePokemonList from '../../containers/oraganisms/PokemonList';\nimport './Pokemons.css';\nimport { Region, regionList as RegionList } from '../../data/region-list';\nimport regionUrlMap, { Url } from '../../domains/pokeapi/data/region-url-list';\n\ntype Props = {\n  regionList: typeof RegionList;\n  prefetch?: (url: Url) => void;\n};\n\nconst Pokemons: VFC<Props> = ({ regionList, prefetch = () => undefined }) => {\n  const [regionName, setRegionName] = useState('all');\n  const [isPending, startTransition] = useTransition();\n  const ebKey = useRef(0);\n\n  const menuItems = regionList.map((region) => ({\n    key: region,\n    name: capitalize(region),\n    onClick: () => {\n      // FIXME: suspenseを2階層に入れていて、その結果transitionが効かない。\n      if (regionName) {\n        startTransition(() => setRegionName(region));\n      } else {\n        setRegionName(region);\n      }\n    },\n    onMouseOver: () => prefetch(regionUrlMap[region]), // Note: ここでgetPokemonsResultのprefetchをした後でそれ以降のget処理を動くようにしたい。\n    active: region === regionName,\n  }));\n\n  return (\n    <>\n      <header className=\"app-header\">\n        <h1>PokeDex</h1>\n      </header>\n      <Menu items={menuItems} text />\n      <Divider />\n      <div className={isPending ? 'loading' : ''}>\n        <ErrorBoundary\n          statusMessages={{\n            404: `${regionName}というリージョンがが見つかりません`,\n          }}\n          onError={() => {\n            ebKey.current += 1;\n          }}\n          key={ebKey.current}\n        >\n          <SuspenseList>\n            <Suspense fallback={<Spinner size=\"large\" />}>\n              <EnhancePokemonList\n                url={\n                  regionName\n                    ? regionUrlMap[regionName as Region]\n                    : regionUrlMap.all\n                }\n              />\n            </Suspense>\n          </SuspenseList>\n        </ErrorBoundary>\n      </div>\n    </>\n  );\n};\n\nexport default Pokemons;\n","import { VFC } from 'react';\nimport { useQueryClient } from 'react-query';\n\nimport { regionList } from '../../data/region-list';\nimport { Url } from '../../domains/pokeapi/data/region-url-list';\nimport { getPokemonsResult } from '../../domains/pokeapi';\nimport Pokemons from '../../components/pages/Pokemons';\n\nconst EnhancedPokemons: VFC<{ enablePrefetch?: boolean }> = ({\n  enablePrefetch = false,\n}) => {\n  const queryClient = useQueryClient();\n  const prefetch = (url: Url): void => {\n    const load = async (): Promise<void> => {\n      // Note: prefetchがgetPokemonsResultにしか適応できておらず、本当はその応答を利用したgetPokemon, getSpecies, getTypeもprefetchしたい。\n      try {\n        await queryClient.prefetchQuery([url, 'pokemons'], () =>\n          getPokemonsResult(url),\n        );\n      } catch (error) {\n        console.error(error); // eslint-disable-line no-console\n      }\n    };\n\n    void load();\n  };\n  const pokemonsProps = enablePrefetch\n    ? { regionList, prefetch }\n    : { regionList };\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Pokemons {...pokemonsProps} />;\n};\n\nexport default EnhancedPokemons;\n","import { VFC } from 'react';\nimport Pokemons from './containers/pages/Pokemons';\nimport './App.css';\n\nconst App: VFC = () => <Pokemons enablePrefetch />;\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nimport App from './App';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 0,\n      suspense: true,\n    },\n    mutations: {\n      retry: 0,\n    },\n  },\n});\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nconst root: ReactDOM.Root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n    {process.env.NODE_ENV === 'development' && (\n      <ReactQueryDevtools initialIsOpen={false} />\n    )}\n  </QueryClientProvider>,\n);\n"],"sourceRoot":""}