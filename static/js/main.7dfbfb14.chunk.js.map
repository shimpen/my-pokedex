{"version":3,"sources":["data/region-list.ts","domains/pokeapi/models/raw/language.ts","domains/pokeapi/models/raw/name.ts","domains/pokeapi/models/raw/species.ts","domains/pokeapi/models/raw/type.ts","domains/pokeapi/models/pokemons.ts","domains/pokeapi/models/pokemon.ts","domains/pokeapi/services/config.ts","domains/pokeapi/models/raw/pokemon-results.ts","domains/pokeapi/services/raw/get-pokemons.ts","domains/pokeapi/models/raw/pokemon.ts","domains/pokeapi/services/raw/get-pokemon.ts","domains/pokeapi/services/raw/get-species.ts","domains/pokeapi/services/raw/get-type.ts","domains/pokeapi/services/get-pokemons.ts","ErrorBoundary.tsx","components/molecules/Spinner.tsx","components/organisms/PokemonList.tsx","containers/oraganisms/PokemonList.tsx","domains/pokeapi/data/region-url-list.ts","components/pages/Pokemons.tsx","containers/pages/Pokemons.tsx","App.tsx","index.tsx"],"names":["regionList","isLanguage","arg","l","name","url","isName","n","language","isSpecies","s","flavorTextEntries","some","text","f","flavorText","isFlavorText","genera","genus","g","isGenus","names","isType","t","isPokemonsResult","p","next","previous","pokemons","pokemon","id","species","types","type","sprites","frontDefault","other","officialArtwork","isPokemon","DEFAULT_API_OPTIONS","timeout","retry","hooks","afterResponse","_request","_options","response","a","Blob","JSON","camelcaseKeys","json","deep","stringify","body","headers","status","statusText","init","Response","isPokemonResults","u","results","result","isPokemonResult","getPokemonsRow","options","mergedOptions","ky","get","Error","slot","isPokemonType","getPokemon","getSpecies","getType","initialUrl","getPokemonsResult","pokemonsRow","Promise","all","map","pokemonsResult","DEFAULT_MESSAGES","0","ErrorBoundary","props","componentDidCatch","error","info","onError","console","render","children","statusMessages","state","hasError","messages","statusCode","Object","keys","includes","String","Message","warning","PureComponent","getDerivedStateFromError","Spinner","size","className","Loader","inline","active","PokemonList","Card","Group","Meta","textAlign","Image","src","Header","find","rounded","Description","EnhancedPokemonList","useQuery","enabled","data","baseUrl","regionUrlMap","kanto","johto","hoenn","sinnoh","unova","kalos","alola","galar","Pokemons","prefetch","useState","regionName","setRegionName","useTransition","isPending","startTransition","ebKey","useRef","menuItems","region","key","capitalize","onClick","onMouseOver","Menu","items","Divider","404","current","fallback","EnhancedPokemons","enablePrefetch","queryClient","useQueryClient","pokemonsProps","prefetchQuery","load","App","QueryClient","defaultOptions","queries","suspense","mutations","rootElement","document","getElementById","ReactDOM","createRoot","QueryClientProvider","client","process"],"mappings":"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","file":"static/js/main.7dfbfb14.chunk.js","sourcesContent":["export const regionList = [\n  'all',\n  'kanto',\n  'johto',\n  'hoenn',\n  'sinnoh',\n  'unova',\n  'kalos',\n  'alola',\n  'galar',\n] as const;\n\nexport type Region = typeof regionList[number];\n","export type Language = {\n  name: string;\n  url: string;\n};\n\nexport const isLanguage = (arg: unknown): arg is Language => {\n  const l = arg as Language;\n\n  return typeof l?.name === 'string' && typeof l?.url === 'string';\n};\n","import { Language, isLanguage } from './language';\n\nexport type Name = {\n  name: string;\n  language: Language;\n};\n\nexport const isName = (arg: unknown): arg is Name => {\n  const n = arg as Name;\n\n  return typeof n?.name === 'string' && isLanguage(n?.language);\n};\n","import { Language, isLanguage } from './language';\nimport { Name, isName } from './name';\n\nexport type FlavorText = {\n  flavorText: string;\n  language: Language;\n};\n\nexport type Genus = {\n  genus: string;\n  language: Language;\n};\n\nexport type Species = {\n  flavorTextEntries: FlavorText[];\n  genera: Genus[];\n  names: Name[];\n};\n\nconst isFlavorText = (arg: unknown): arg is FlavorText => {\n  const f = arg as FlavorText;\n\n  return typeof f?.flavorText === 'string' && isLanguage(f?.language);\n};\n\nconst isGenus = (arg: unknown): arg is Genus => {\n  const g = arg as Genus;\n\n  return typeof g?.genus === 'string' && isLanguage(g?.language);\n};\n\nconst isSpecies = (arg: unknown): arg is Species => {\n  const s = arg as Species;\n\n  return (\n    !s?.flavorTextEntries.some((text) => !isFlavorText(text)) &&\n    !s?.genera.some((genus) => !isGenus(genus)) &&\n    !s?.names.some((name) => !isName(name))\n  );\n};\n\nexport { isSpecies };\n","import { Name, isName } from './name';\n\nexport type Type = {\n  name: string;\n  names: Name[];\n};\n\nconst isType = (arg: unknown): arg is Type => {\n  const t = arg as Type;\n\n  return typeof t?.name === 'string' && !t?.names.some((name) => !isName(name));\n};\n\nexport { isType };\n","import { isPokemon, Pokemon } from './pokemon';\n\nexport type PokemonsResult = {\n  next: string;\n  previous: string;\n  pokemons: Pokemon[];\n};\n\nconst isPokemonsResult = (arg: unknown): arg is PokemonsResult => {\n  const p = arg as PokemonsResult;\n\n  return (\n    p?.next === null ||\n    (typeof p?.next === 'string' && p?.previous === null) ||\n    (typeof p?.previous === 'string' &&\n      !p?.pokemons.some((pokemon) => !isPokemon(pokemon)))\n  );\n};\n\nexport { isPokemonsResult };\n","import { Species, isSpecies } from './raw/species';\nimport { Type, isType } from './raw/type';\n\nexport type Pokemon = {\n  id: number;\n  name: string;\n  species: Species;\n  types: Type[];\n  sprites: {\n    // どうにかしたいな...imagesでまとめたい\n    frontDefault: string;\n    other: {\n      officialArtwork: {\n        frontDefault: string;\n      };\n    };\n  };\n};\n\nconst isPokemon = (arg: unknown): arg is Pokemon => {\n  const p = arg as Pokemon;\n\n  return (\n    typeof p?.id === 'number' &&\n    typeof p?.name === 'string' &&\n    isSpecies(p?.species) &&\n    !p?.types.some((type) => !isType(type)) &&\n    typeof p?.sprites.frontDefault === 'string' &&\n    typeof p?.sprites.other.officialArtwork.frontDefault === 'string'\n  );\n};\n\nexport { isPokemon };\n","/* eslint-disable import/prefer-default-export */\nimport { Options as KyOptions, NormalizedOptions } from 'ky';\nimport camelcaseKeys from 'camelcase-keys';\n\nexport const DEFAULT_API_OPTIONS: KyOptions = {\n  timeout: 7000,\n  retry: 2,\n  hooks: {\n    afterResponse: [\n      async (\n        _request: Request,\n        _options: NormalizedOptions,\n        response: Response,\n      ): Promise<Response> => {\n        const body = new Blob(\n          [\n            JSON.stringify(\n              camelcaseKeys(await response.json(), { deep: true }),\n              null,\n              2,\n            ),\n          ],\n          { type: 'application/json' },\n        );\n        const { headers, status, statusText } = response;\n        const init = { headers, status, statusText };\n\n        return new Response(body, init);\n      },\n    ],\n  },\n};\n","export type PokemonResult = {\n  name: string;\n  url: string;\n};\n\nexport type PokemonResults = {\n  next: string | null;\n  previous: string | null;\n  results: PokemonResult[];\n};\n\nconst isPokemonResult = (arg: unknown): arg is PokemonResult => {\n  const u = arg as PokemonResult;\n\n  return typeof u?.name === 'string' && typeof u?.url === 'string';\n};\n\nconst isPokemonResults = (arg: unknown): arg is PokemonResults => {\n  const u = arg as PokemonResults;\n\n  return (\n    u?.next === null ||\n    (typeof u?.next === 'string' && u?.previous === null) ||\n    (typeof u?.previous === 'string' &&\n      !u?.results.some((result) => !isPokemonResult(result)))\n  );\n};\n\nexport { isPokemonResult, isPokemonResults };\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport {\n  isPokemonResults,\n  PokemonResults,\n} from '../../models/raw/pokemon-results';\n\n// const initialUrl = `https://pokeapi.co/api/v2/pokemon?limit=151`;\n\nconst getPokemonsRow = async (\n  url: string,\n  options?: Options,\n): Promise<PokemonResults> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(url, mergedOptions);\n  const pokemons = (await response.json()) as unknown[];\n\n  if (!isPokemonResults(pokemons)) {\n    throw Error('API type error');\n  }\n\n  return pokemons;\n};\n\nexport default getPokemonsRow;\n","export type Pokemon = {\n  id: number;\n  name: string;\n  species: {\n    name: string;\n    url: string;\n  };\n  types: PokemonType[];\n  sprites: {\n    frontDefault: string;\n    other: {\n      officialArtwork: {\n        frontDefault: string;\n      };\n    };\n  };\n};\n\nexport type PokemonType = {\n  slot: number;\n  type: {\n    name: string;\n    url: string;\n  };\n};\n\nconst isPokemonType = (arg: unknown): arg is PokemonType => {\n  const p = arg as PokemonType;\n\n  return (\n    typeof p?.slot === 'number' &&\n    typeof p?.type.name === 'string' &&\n    typeof p?.type.url === 'string'\n  );\n};\n\nconst isPokemon = (arg: unknown): arg is Pokemon => {\n  const p = arg as Pokemon;\n\n  return (\n    typeof p?.id === 'number' &&\n    typeof p?.name === 'string' &&\n    typeof p?.species.name === 'string' &&\n    typeof p?.species.url === 'string' &&\n    !p?.types.some((type) => !isPokemonType(type)) &&\n    typeof p?.sprites.frontDefault === 'string' &&\n    typeof p?.sprites.other.officialArtwork.frontDefault === 'string'\n  );\n};\n\nexport { isPokemon };\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport { isPokemon, Pokemon } from '../../models/raw/pokemon';\n\nconst getPokemon = async (url: string, options?: Options): Promise<Pokemon> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(\n    url, // fixme nameかurlで取得することになるのかな？\n    mergedOptions,\n  );\n  const pokemon = (await response.json()) as unknown[];\n\n  if (!isPokemon(pokemon)) {\n    throw Error('API type error');\n  }\n\n  return pokemon;\n};\n\nexport default getPokemon;\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport { isSpecies, Species } from '../../models/raw/species';\n\nconst getSpecies = async (url: string, options?: Options): Promise<Species> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(url, mergedOptions);\n  const species = (await response.json()) as unknown[];\n\n  if (!isSpecies(species)) {\n    throw Error('API type error');\n  }\n\n  return species;\n};\n\nexport default getSpecies;\n","import ky, { Options } from 'ky';\nimport { DEFAULT_API_OPTIONS } from '../config';\nimport { isType, Type } from '../../models/raw/type';\n\nconst getType = async (name: string, options?: Options): Promise<Type> => {\n  const mergedOptions = {\n    ...DEFAULT_API_OPTIONS,\n    ...options,\n  };\n  const response = await ky.get(\n    `https://pokeapi.co/api/v2/type/${name}`,\n    mergedOptions,\n  );\n  const type = (await response.json()) as unknown[];\n\n  if (!isType(type)) {\n    throw Error('API type error');\n  }\n\n  return type;\n};\n\nexport default getType;\n","import getPokemonsRow from './raw/get-pokemons';\nimport getPokemon from './raw/get-pokemon';\nimport getSpecies from './raw/get-species';\nimport getType from './raw/get-type';\nimport { isPokemonsResult, PokemonsResult } from '../models/pokemons';\nimport { Url } from '../data/region-url-list';\n\nconst initialUrl: Url = `https://pokeapi.co/api/v2/pokemon?limit=100&offset=0`;\n\n// どっかでregionUrlMap[region] で初期の値を取得するようにするはず...\n\nconst getPokemonsResult = async (\n  url: Url = initialUrl,\n): Promise<PokemonsResult> => {\n  const pokemonsRow = await getPokemonsRow(url);\n  const pokemons = await Promise.all(\n    pokemonsRow.results.map(async (result) => {\n      // pokemonとspeciesも並列処理に変えたい\n      const pokemon = await getPokemon(result.url);\n      const species = await getSpecies(pokemon.species.url);\n      const types = await Promise.all(\n        pokemon.types.map((type) => getType(type.type.name)),\n      );\n\n      return { ...pokemon, species, types };\n    }),\n  );\n\n  const pokemonsResult = {\n    next: pokemonsRow.next,\n    previous: pokemonsRow.previous,\n    pokemons,\n  };\n\n  if (!isPokemonsResult(pokemonsResult)) {\n    throw Error('API type error');\n  }\n\n  return pokemonsResult;\n};\n\nexport default getPokemonsResult;\n","import { ErrorInfo, PureComponent, ReactNode } from 'react';\nimport ky from 'ky';\nimport { Message } from 'semantic-ui-react';\n\ntype StatusMessages = { [status: number]: string };\ntype Props = { statusMessages?: StatusMessages; onError?: () => void };\ntype State = { hasError: boolean; error: Error | null };\nconst DEFAULT_MESSAGES: StatusMessages = { 0: 'サーバエラーです' };\n\nclass ErrorBoundary extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError = (error: Error): State => ({\n    hasError: true,\n    error,\n  });\n\n  componentDidCatch = (error: Error, info: ErrorInfo): void => {\n    const { onError } = this.props;\n    if (onError) onError();\n\n    console.error(error, info); // eslint-disable-line no-console\n  };\n\n  render = (): ReactNode => {\n    const { children, statusMessages = {} } = this.props;\n    const { hasError, error } = this.state;\n    const messages = { ...DEFAULT_MESSAGES, ...statusMessages };\n\n    if (hasError) {\n      const statusCode = (error as ky.HTTPError)?.response?.status;\n\n      if (statusCode && Object.keys(messages).includes(String(statusCode))) {\n        return <Message warning>{messages[statusCode]}</Message>;\n      }\n\n      return <Message error>{messages[0]}</Message>;\n    }\n\n    return children;\n  };\n}\n\nexport default ErrorBoundary;\n","import { VFC } from 'react';\nimport { Loader, SemanticSIZES } from 'semantic-ui-react';\n\nimport './Spinner.css';\n\nconst Spinner: VFC<{ size?: SemanticSIZES }> = ({ size = 'medium' }) => (\n  <div className=\"spinner\">\n    <Loader size={size} inline=\"centered\" active>\n      読み込み中...\n    </Loader>\n  </div>\n);\n\nexport default Spinner;\n","import { VFC } from 'react';\nimport { Card, Image } from 'semantic-ui-react';\n\nimport { PokemonsResult } from '../../domains/pokeapi';\nimport './PokemonList.css';\n\nconst PokemonList: VFC<{ result: PokemonsResult }> = ({ result }) => (\n  <>\n    <Card.Group className=\"cards-container\">\n      {result.pokemons.map((pokemon) => (\n        <Card className=\"card-container\" key={pokemon.id}>\n          <div className=\"card-header\">\n            <div>\n              <Card.Meta textAlign=\"left\">{pokemon.id}</Card.Meta>\n              <Image size=\"mini\" src={pokemon.sprites.frontDefault} />\n            </div>\n            <div>\n              <Card.Header textAlign=\"center\">\n                {\n                  pokemon.species.names.find(\n                    (name) => name.language.name === 'ja',\n                  )?.name\n                }\n              </Card.Header>\n              <Card.Header textAlign=\"center\">{pokemon.name}</Card.Header>\n            </div>\n            <div className=\"card-header__type\">\n              {pokemon.types.map((type) =>\n                type.names.map(\n                  (name) =>\n                    name.language.name === 'ja-Hrkt' && (\n                      <Card.Header textAlign=\"right\" key={name.name}>\n                        {name.name}\n                      </Card.Header>\n                    ),\n                ),\n              )}\n            </div>\n          </div>\n          <div className=\"card-image\">\n            <Image\n              size=\"large\"\n              src={pokemon.sprites.other.officialArtwork.frontDefault}\n              rounded\n            />\n          </div>\n          <div className=\"card-genera\">\n            <Card.Description>\n              {\n                pokemon.species.genera.find(\n                  (genus) => genus.language.name === 'ja',\n                )?.genus\n              }\n            </Card.Description>\n            <Card.Description>\n              {\n                pokemon.species.genera.find(\n                  (genus) => genus.language.name === 'en',\n                )?.genus\n              }\n            </Card.Description>\n          </div>\n          <div className=\"card-description\">\n            <Card.Description>\n              {\n                pokemon.species.flavorTextEntries.find(\n                  (text) => text.language.name === 'ja',\n                )?.flavorText\n              }\n            </Card.Description>\n            <Card.Description>\n              {\n                pokemon.species.flavorTextEntries.find(\n                  (text) => text.language.name === 'en',\n                )?.flavorText\n              }\n            </Card.Description>\n          </div>\n        </Card>\n      ))}\n    </Card.Group>\n  </>\n);\n\nexport default PokemonList;\n","import { VFC } from 'react';\nimport { useQuery } from 'react-query';\n\nimport PokemonList from '../../components/organisms/PokemonList';\nimport { getPokemonsResult } from '../../domains/pokeapi';\nimport { Url } from '../../domains/pokeapi/data/region-url-list';\n\nconst EnhancedPokemonList: VFC<{ url: Url }> = ({ url }) => {\n  const { data: pokemonsResult } = useQuery(\n    [url, 'pokemons'],\n    () => getPokemonsResult(url),\n    {\n      enabled: true,\n    },\n  );\n\n  if (!pokemonsResult) return <div>No data</div>; // なんでpokemonResultがundefinedを取りうるのか...\n\n  return <PokemonList result={pokemonsResult} />;\n};\n\nexport default EnhancedPokemonList;\n","import { Region } from '../../../data/region-list';\n\nexport type Url = `https://pokeapi.co/api/v2/pokemon?limit=${number}&offset=${number}`;\n\nexport type RegionUrlMap = { [key in Region]: Url };\n\nconst baseUrl = `https://pokeapi.co/api/v2/pokemon?`;\n\nconst regionUrlMap: RegionUrlMap = {\n  all: `${baseUrl}limit=100&offset=0`,\n  kanto: `${baseUrl}limit=151&offset=0`,\n  johto: `${baseUrl}limit=100&offset=151`,\n  hoenn: `${baseUrl}limit=135&offset=251`,\n  sinnoh: `${baseUrl}limit=97&offset=386`,\n  unova: `${baseUrl}limit=156&offset=493`,\n  kalos: `${baseUrl}limit=72&offset=649`,\n  alola: `${baseUrl}limit=88&offset=721`,\n  galar: `${baseUrl}limit=89&offset=809`,\n} as const;\n\nexport default regionUrlMap;\n","import {\n  VFC,\n  // FormEvent,\n  Suspense,\n  SuspenseList,\n  useRef,\n  useState,\n  useTransition,\n} from 'react';\nimport { Divider, Menu } from 'semantic-ui-react';\n// import capitalize from 'lodash/capitalize';\n\nimport capitalize from 'lodash/capitalize';\nimport ErrorBoundary from '../../ErrorBoundary';\nimport Spinner from '../molecules/Spinner';\nimport PokemonList from '../../containers/oraganisms/PokemonList';\nimport './Pokemons.css';\nimport { Region, regionList as RegionList } from '../../data/region-list';\nimport regionUrlMap, { Url } from '../../domains/pokeapi/data/region-url-list';\n\ntype Props = {\n  regionList: typeof RegionList;\n  prefetch?: (url: Url) => void;\n};\n\nconst Pokemons: VFC<Props> = ({ regionList, prefetch = () => undefined }) => {\n  const [regionName, setRegionName] = useState('');\n  // const [input, setInput] = useState('');\n  const [isPending, startTransition] = useTransition();\n  const ebKey = useRef(0);\n\n  const menuItems = regionList.map((region) => ({\n    key: region,\n    name: capitalize(region),\n    onClick: () => {\n      // setInput('');\n\n      if (regionName) {\n        startTransition(() => setRegionName(region));\n      } else {\n        setRegionName(region);\n      }\n    },\n    onMouseOver: () => prefetch(regionUrlMap[region]),\n    active: region === regionName,\n  }));\n\n  return (\n    <>\n      <header className=\"app-header\">\n        <h1>PokeDex</h1>\n      </header>\n      <Menu items={menuItems} text />\n      <Divider />\n      <div className={isPending ? 'loading' : ''}>\n        <ErrorBoundary\n          statusMessages={{\n            404: `${regionName}というリージョンがが見つかりません`,\n          }}\n          onError={() => {\n            ebKey.current += 1;\n          }}\n          key={ebKey.current}\n        >\n          <SuspenseList>\n            <Suspense fallback={<Spinner size=\"large\" />}>\n              <PokemonList\n                url={\n                  regionName\n                    ? regionUrlMap[regionName as Region]\n                    : regionUrlMap.all\n                }\n              />\n            </Suspense>\n          </SuspenseList>\n        </ErrorBoundary>\n      </div>\n    </>\n  );\n};\n\nexport default Pokemons;\n","import { VFC } from 'react';\nimport { useQueryClient } from 'react-query';\n\nimport { regionList } from '../../data/region-list';\nimport { Url } from '../../domains/pokeapi/data/region-url-list';\nimport { getPokemonsResult } from '../../domains/pokeapi';\nimport Pokemons from '../../components/pages/Pokemons';\n\nconst EnhancedPokemons: VFC<{ enablePrefetch?: boolean }> = ({\n  enablePrefetch = false,\n}) => {\n  const queryClient = useQueryClient();\n  const prefetch = (url: Url): void => {\n    const load = async (): Promise<void> => {\n      try {\n        await queryClient.prefetchQuery([url, 'pokemons'], () =>\n          getPokemonsResult(url),\n        );\n      } catch (error) {\n        console.error(error); // eslint-disable-line no-console\n      }\n    };\n\n    void load();\n  };\n  const pokemonsProps = enablePrefetch\n    ? { regionList, prefetch }\n    : { regionList };\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Pokemons {...pokemonsProps} />;\n};\n\nexport default EnhancedPokemons;\n","import { VFC } from 'react';\nimport Pokemons from './containers/pages/Pokemons';\nimport './App.css';\n\nconst App: VFC = () => <Pokemons enablePrefetch={false} />;\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nimport App from './App';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 0,\n      suspense: true,\n    },\n    mutations: {\n      retry: 0,\n    },\n  },\n});\n\nconst rootElement = document.getElementById('root') as HTMLElement;\nconst root: ReactDOM.Root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n    {process.env.NODE_ENV === 'development' && (\n      <ReactQueryDevtools initialIsOpen={false} />\n    )}\n  </QueryClientProvider>,\n);\n"],"sourceRoot":""}